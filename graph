import kdv
import numpy as np
from scipy import cosh, sqrt, linspace
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure,plot,xlim,ylim,grid,title,xlabel,ylabel,show
import matplotlib.animation as animation


#graph numerical
def graph_num(y, L, dt, Nt):
    plt.figure(figsize=(6,5))
    plt.imshow(np.transpose(y[:,::-1]), extent=[0,L,0,dt*Nt]) #retourner le temps si non on a la cond initiale au dessus du graphe
    plt.colorbar()
    plt.xlabel('x')
    plt.ylabel('t')
    plt.axis('tight')
    plt.title('Korteweg-de Vries -two solutions -numerical')
    plt.show()

#graph analytical
def graph_analyt(y_analytic, L, dt,Nt):
    plt.figure(figsize=(6,5))
    plt.imshow(np.transpose(y_analytic[:,::-1]), extent=[0,L,0,dt*Nt]) #retourner le temps si non on a la cond initiale au dessus du graphe
    plt.colorbar()
    plt.xlabel('x')
    plt.ylabel('t')
    plt.axis('tight')
    plt.title('Korteweg-de Vries -two solutions- analytical')
    plt.show()

def anim_num(y, x, L):
    # parametres animation
    interval_image = 1    # intervalle entre deux images exprimÃ© en ms
    nb_images = 3000      # nombre d'iamges de l'animation

    def init():
        line.set_data([],[])
        return line,

    # fonction de tracé de l'animation
    def animate(i):
        line.set_data(x,y[:,i])
        return line,

    # tracÃ© de l'Ã©volution
    fig1 = figure(figsize=(8,6))
    line, = plot([],[])

    xlim(0,L)
    ylim(0.0,1.5)
    grid(True)
    title("Korteweg de Vries")
    xlabel("X")
    ylabel("U(x,t)")

    ani = animation.FuncAnimation(fig1,animate,init_func=init,frames=nb_images,
                                  interval= interval_image,blit=True, repeat=False)
    return ani
