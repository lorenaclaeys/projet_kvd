import math
import numpy as np
from scipy.fftpack import diff as psdiff
import matplotlib.pyplot as plt
from numpy.fft import fft,ifft

def Kdvanalytic(x,t,c,a):
    return .5*c*(np.cosh(.5*math.sqrt(c)*(x - c*t - a)))**(-2)


#numerical solution
def kdv_euler(Nx,Nt,u0,L,dt):
    y = np.zeros((Nx,Nt))
    y[:,0] = u0
    k =np.zeros(Nx)
    k[0:129] = np.arange(0 ,Nx/2+1)
    k[129:] = np.arange(-Nx/2 + 1 ,0 , 1)
    for n in range(1,Nt):
        a = 2*np.pi*(k/L)
        u_hat = np.fft.fft(y[:,n-1])
        g_hat = (np.exp(dt*1j*a**3)* u_hat)
        g = (np.fft.ifft(g_hat))
        g2 = (np.fft.ifft(1j*a*np.fft.fft(g**2)))
        y[:,n] = np.real(g - 3*g2*dt)
    return y



# analytical solution
def kdv_analyt_collison(x, c1, c2, a1, a2, L, Nt,Nx,dt):
    y = np.zeros((Nx,Nt))
    for n in range(1,Nt):
        t = n*dt
        y[:,n] = Kdvanalytic(x,t,c1,a1*L) + Kdvanalytic(x,t,c2,a2*L)
    return y
